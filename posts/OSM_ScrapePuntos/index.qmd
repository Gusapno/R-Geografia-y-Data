---
title: "Webscrape de puntos de Open Street Map (OSM)"
author: "Gabriel Ramírez"
date: "04/02/2022"
lang: es
editor: visual
csl: apa.csl
bibliography: references.bib
categories: [SIG]
image: "image.jpg"
---

# Obtención de datos de Open Street Map (OSM) mediante webscraping

Open Street Map (OSM) es una base de datos geográfica gratis que es actualizada y mantenida de forma colaborativa. Estos datos son capturados con dispositivos GPS, ortofotografías y otras fuentes libres. Se distribuyen bajo la Licencia Abierta de Bases de Datos (ODbL). Esta licencia permite a los usuarios usar, compartir y modificar libremente la base de datos de forma que se mantiene la misma libertad para los demás.

En la página web de [Open Street Map](openstreetmap.org) es posible buscar la ubicación de Instituciones. En este caso interesa conocer la ubicación de cada Municipalidad en los ochenta y dos cantones del Costa Rica. Para lograr esto, se cuenta con la capa de cantones de Costa Rica la cual ofrece la lista de cantones del país.

Se utilizará la librería [RSelenium](https://cran.r-project.org/web/packages/RSelenium/index.html) [@RSelenium] la cual permite manejar un navegador web de forma nativa o remota. Con esta librería es posible automatizar tareas en los navegadores. Para lograr obtener la ubicación de las municipalidades, es posible automatizar la tarea de buscar todas las municipalidades y sus respectivas coordenadas.

Esto también es posible mediante la utilización de la API (Application Programming Interface) pero el soporte en lenguaje R no es muy flexible. Con la librería [`osmdata`](https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html) [@osmdata] se pueden obtener datos de la siguiente forma:

```{r}
#| include: false
library(tidyverse)
library(knitr)
```

```{r}
#| warning: false
#| output: false
#| eval: false

library(osmdata) # 
library(tidyverse) #
library(sf) #
library(kableExtra) #
# Capa de cantones de Costa Rica, se usará como bounding box
cant.sp <- sf::read_sf("sp/LimiteCantonal5K_.shp")

# Se transforma a WGS84
bbox_wgs84 <- st_bbox(st_transform(cant.sp, crs = "WGS84"))

# Se extraen los datos con los límites de la capa cant.sp
datos_muni <- opq(bbox = bbox_wgs84) %>% # "Overpass" query
                add_osm_feature(key = "amenity",
                        value = 'townhall',
                        value_exact = F) %>% 
                osmdata_sf()

# Los datos extraídos poseen puntos, polígonos y multipolígonos.
# en nuestro caso interesan los puntos
puntos <- datos_muni$osm_points

# Se transforma a UTF-8 ya que posee otra codificación
puntos <- dplyr::mutate_if(puntos, is.character, 
                           .funs = function(x){return(`Encoding<-`(x, "UTF-8"))})

```

Al revisar los datos, se aprecia que existen muchos valores sin nombre y que algunos de ellos no corresponden a municipalidades. Para observar los registros con nombre se eliminan los que no poseen nombre. Estos son algunos de los resultados:

```{r}
#| include: false
puntos <- read.csv("output/csv/muni_puntos.csv")
```

```{r}
# Se remueven los valores en blanco
tabla <- dplyr::filter(puntos, grepl("",name))
```

```{r}
#| output: true
#| echo: false
#| warning: false

# Para mostrar la tabla
kable(head(tabla[,2:5]), format = "html", 
      table.attr = "style='width:30%;'",row.names = FALSE) %>%
  kableExtra::kable_styling()
```

Se aprecia que los resultados no incluyen todas las municipalidades del país. Por su parte los datos de polígonos y multipolígonos si poseen información sobre las municipalidades pero el proceso para obtener una ubicación puntual asociada a cada municipalidad podría ser un poco tedioso. Ante esto, es posible plantear un webscrape con RSelenium en el que se busque cada Municipalidad del país en la página web de OSM y en caso que exista más de un resultado, se utilizaría el más similar a lo deseado. Para evaluar la similitud de un string con otro, se utiliza la librería [stringdist](https://cran.r-project.org/web/packages/stringdist/index.html) [@stringdist] el cual ofrece un puntaje de similitud entre dos strings.

Después de realizar una búsqueda se aprecia que la localización puntual del elemento es incluída en la estructura de la página, lo cual se puede usar para extraer las coordenadas.

![HTML de la página web](images/Screenshot%202024-04-07%20003033.png){#fig-html fig-align="center"}

En un resultado de búsqueda, las municipalidades pueden ser denominadas "Palacio Municipal" por lo que si no se encuentra similitud con "Municipalidad de (Cantón)" se intenta con Palacio Municipal.

# Planteamiento del webscrape con RSelenium

```{r}
#| warning: false
#| output: false
#| eval: false

library(stringdist) # Comparar similitud de strings
library(RSelenium) # RSelenium
library(tidyverse) # 
library(seleniumPipes) # Implementa W3C webdriver
library(netstat) # Para el free_port()
# Empezar el servidor
rs_driver_object <- rsDriver(browser = 'chrome', # Se utilizará Google Chrome
                             chromever = 'latest', # Versión de Chrome
                             verbose = FALSE, # No incluir mensajes de estado
                             port = free_port(), # Se utiliza un puerto libre
                             check = TRUE) # Checar si hay nuevas versiones

# crear un objeto cliente
remDr <- rs_driver_object$client

# Se navega a la página de interés

remDr$navigate('https://www.openstreetmap.org') # 
```

Para poder automatizar la búsqueda de todas las municipalidades es necesario conocer como referirse al cuadro de búsqueda. Al revisar en la página, el xpath completo del cuadro de búsqueda es `/html/body/div/div[1]/div[1]/form[1]/div/div[1]/div/input[1]`, con lo cual se puede interactuar con el mismo de la siguiente forma:

```{r}
#| warning: false
#| output: false
#| eval: false

# Se asigna el xpath a una variable para simplificar el código
xpath_cuadro <- "/html/body/div/div[1]/div[1]/form[1]/div/div[1]/div/input[1]"

# Se busca en el web driver
cuadro_busqueda <- remDr$findElement("xpath",xpath_cuadro)

# Se envía texto al elemento pero debe ser en formato lista
cuadro_busqueda$sendKeysToElement(list(paste0("Municipalidad de ",
                                                cant.sp$canton[1], " Costa Rica")))

# El texto se puede limpiar de la siguiente forma:
cuadro_busqueda$clearElement()
```

Para realizar la búsqueda se realiza un proceso similar (se identifica el xpath pero se da click en el elemento). También es posible escribir la indicación de click inmediatamente de la siguiente forma:

```{r}
#| warning: false
#| output: false
#| eval: false

# Se envía texto al elemento pero debe ser en formato lista
cuadro_busqueda$sendKeysToElement(list(paste0("Municipalidad Heredia")))

# xpath para buscar el elemento
click_busqueda <- '//*[@id="sidebar"]/div[1]/form[1]/div/div[1]/div/input[2]'

# Indicaciones para dar click
remDr$findElement("xpath",click_busqueda)$clickElement()
```

![](images/Screenshot%202024-04-07%20192634.png){#fig-resultados-busqueda fig-align="center"}

Con esta búsqueda, se obtienen dos resultados (lo cual varía según el área de búsqueda) pero el resultado deseado es específicamente la "Municipalidad de Heredia". Para identificar mediante código el resultado deseado, es posible comparar los resultados obtenidos con el resultado deseado.

```{r}
#| warning: false
#| output: false
#| eval: false

# xpath para identificar los resultados visibles
resultados_busqueda <- "/html/body/div/div[1]/div[5]/div[2]/ul/li/a"

# Se utiliza "findElements" ya que se desean todos los elementos
cl_result <- remDr$findElements("xpath",resultados_busqueda)
```

Se obtiene una lista del tamaño de la cantidad de resultados visibles (podrían ser más si se presiona en More Results). Para acceder al nombre de la municipalidad, separarlo de la dirección y compararlo con lo deseado es posible realizar el siguiente procedimiento:

```{r}
#| warning: false
#| output: false
#| eval: false

nombres_resultado <- data.frame(matrix(nrow = 0, ncol = 3))
colnames(nombres_resultado) <- c("Nombre_completo","Nombre","Similitud")
for (i in 1:length(cl_result)) {
  # Se añade al dataframe
  nombres_resultado[i,1] <- as.character(cl_result[[i]]$getElementText())
  
  
  # Se divide por la coma y se selecciona el primer resultado
  nombres_resultado[i,2] <- str_split(nombres_resultado[i,1],",")[[1]][1]

  # Similitud
  nombres_resultado[i,3] <- stringsim("Municipalidad Heredia",nombres_resultado[i,2])
}
```

```{r}
#| include: false

if (file.exists("output/csv/resultados_nombres.csv") == TRUE) {
  nombres_resultado <- read.csv("output/csv/resultados_nombres.csv")  
} else {
  write.csv(nombres_resultado,"output/csv/resultados_nombres.csv")
}

```

```{r}
#| echo: false

# Para mostrar la tabla
kableExtra::kable(head(nombres_resultado), format = "html", 
      table.attr = "style='width:30%;'",row.names = FALSE) %>%
  kableExtra::kable_styling()
```

Se aprecia que el tercer resultado es el que posee mayor similitud con el string deseado, por tanto la información se extraería del mismo. Ya que se identificó el resultado deseado, es posible explorar como obtener las coordenadas del mismo. Para esto al revisar @fig-html se aprecia que existe un atributo asociado a las coordenadas del elemento de búsqueda asociado. Para extraer las coordenadas, se puede realizar el siguiente procedimiento:

```{r}
#| warning: false
#| output: false
#| eval: false
# Para saber cual es el de mayor similitud
res_similar <- as.numeric(which(tolower(nombres_resultado$Similitud) > 0.85))


# Se encuentra la coordenada y se muestra
lon <- cl_result[[res_similar]]$getElementAttribute("data-lon")[[1]]
  
# Se encuentra la coordenada y se muestra
lat <- cl_result[[res_similar]]$getElementAttribute("data-lat")[[1]]

print(paste("La longitud de la Municipalidad de Heredia es",lon))
print(paste("La latitud de la Municipalidad de Heredia es",lat))
```

```{r}
#| echo: false
lon <- "-84.1162254"
lat <- "9.9989845" 
print(paste("La longitud de la Municipalidad de Heredia es",lon))
print(paste("La latitud de la Municipalidad de Heredia es",lat))
```

Con esto es posible iterar por todos los nombres de cantón y guardar las coordenadas para cada municipalidad. Se plantea de la siguiente manera:

```{r}
#| warning: false
#| output: false
#| eval: false

# Nombre de columna para la tabla de salida
ncol_municipalidades <- c("Canton","Nombre","Tipo","X","Y")

# Dataframe con cantidad de nombre de columna igual a ncol_municipalidades
df <- data.frame(matrix(nrow = 0, ncol = length(ncol_municipalidades)))

# Se asignan los nombres de columna
colnames(df) <- ncol_municipalidades

# Se asignan xpath para evitar ruido en el código
cuadro_busqueda <- '/html/body/div/div[1]/div[1]/form[1]/div/div[1]/div/input[1]'
click_busqueda <- '//*[@id="sidebar"]/div[1]/form[1]/div/div[1]/div/input[2]'
resultados_busqueda <- "/html/body/div/div[1]/div[5]/div[2]/ul/li/a"

# La iteración va de 1 al número de cantones (82)
for (i in 1:length(cant.sp$canton)) {
  
  rm(r)
  # Limpiar el cuadro de búsqueea
  remDr$findElement("xpath",cuadro_busqueda)$clearElement()
  
  # Se selecciona el cuadro de busqueda
  busqueda <- remDr$findElement("xpath",cuadro_busqueda)
  
  # Se envía el texto al cuadro de texto
  busqueda$sendKeysToElement(list(paste0("Municipalidad de ", 
                                                cant.sp$canton[i], " Costa Rica")))
  
  # Se da click al botón de buscar
  remDr$findElement("xpath",click_busqueda)$clickElement()
  
  Sys.sleep(3)

  ## Se revisa si el texto de "Resultados" está presente 
  ## Lo cual es indicador de que hubo más de un resultado
  try(assign("r",length(remDr$findElements("xpath",resultados_busqueda))),silent = T)
  
  # Si "r" es igual a 0 se borra (ya que no hubieron mas resultados)
  Sys.sleep(5)
  # el string deseado
  if(r < 2L){
    rm(r)
    resultado_similar <- 1
    cl_result <- remDr$findElements("xpath",resultados_busqueda)
    }
  if (exists("r") == TRUE) {
    # Cantidad de resultados
    a <- as.numeric(r)
    
    # Variable para clickear
    cl_result <- remDr$findElements("xpath",resultados_busqueda)
    
    # Se crea una tabla
    lista_resultados <- data.frame(matrix(nrow = 0, ncol = 4))
    colnames(lista_resultados) <- c("Resultado_Completo","Tipo","Resultado_Split","Score")
    for (it_result in 1:r) {

      # Se itera sobre la tabla creada para añadirle los resultados
      lista_resultados[it_result,1] <- unlist(cl_result[[it_result]]$getElementText())
      lista_resultados[it_result,2] <- cl_result[[it_result]]$getElementAttribute("data-prefix")[[1]]
      lista_resultados[it_result,3] <- str_split(lista_resultados[it_result,1],",")[[1]][1]
      # Este string puede mejorar
      lista_resultados[it_result,4] <- stringsim(paste0("Municipalidad ",cant.sp$canton[i]),
                                          lista_resultados[it_result,3])
    }
    # Si el puntaje de similitud es mayor a 0.85 se procede
    if (max(lista_resultados$Score) > 0.85) {
    # Se busca la palabra similar
    resultado_similar <- as.numeric(which(tolower(lista_resultados$Score) > 0.85 &
                                            lista_resultados$Tipo == "Town Hall"))[[1]]
    }
    # Si el puntaje de similitud es menor a 0.85 se procede
    if (max(lista_resultados$Score) < 0.85) {
    # Se busca el resultado Palacio Municipal
    resultado_similar <- which(grepl("palacio municipal",
                                    tolower(lista_resultados$Resultado)) == TRUE)
    }
  }
  # Se añade el nombre del cantón
  df[i,1] <- cant.sp$canton[i]
  
  # Dirección
  df[i,2] <- unlist(cl_result[[resultado_similar]]$getElementText())
  
  # Tipo
  df[i,3] <- cl_result[[resultado_similar]]$getElementAttribute("data-prefix")[[1]]
  
  # Se añade la coordenada
  df[i,4] <- cl_result[[resultado_similar]]$getElementAttribute("data-lon")[[1]]
  
  # Se añade la coordenada
  df[i,5] <- cl_result[[resultado_similar]]$getElementAttribute("data-lat")[[1]]
  
  print(paste0("Iteración ",i," Municipalidad del cantón de ", cant.sp$canton[i]))
}

write.csv(df,"output/csv/Puntos_Municipalidades.csv")
```

```{r}
#| echo: false
df <- read.csv("output/csv/Puntos_Municipalidades.csv")
```

# Visualización de puntos obtenidos

Los resultados obtenido pueden ser plasmados en un mapa para comprobar las ubicaciones. Esto se puede realizar con la librería `leaflet` [@leaflet]. Se configura de forma que al dar click en cada punto es posible ver la dirección asociada al mismo (aunque se puede mostrar otra información pero en este caso se mostrará la dirección).

```{r}
library(leaflet)
leaflet() %>% addTiles() %>% 
  addCircleMarkers(lng = as.numeric(df$X),
                   lat = as.numeric(df$Y), popup = df$Nombre)
```

---
title: "Webscraping básico con RSelenium"
execute:
  warning: false
author: "Gabriel Ramírez"
date: "12/23/2022"
lang: es
editor: visual
csl: apa.csl
bibliography: references.bib
categories: [Webscraping, RSelenium, analysis]
image: "image.jpg"
---

# Contexto de SICOP

En este proyecto se obtienen datos del Sistema Integrado de Compras Públicas ([SICOP](https://www.sicop.go.cr/index.jsp)) por municipalidad. El fin es realizar un análisis descriptivo y espacializar los datos por municipalidad o institución (cantón o localización de municipalidad).

Este sistema se autodenomina como una novedosa herramienta para la realización de negocios vía web. De forma más específica, permite a las proveedurías del Estado realizar compra y venta de servicios y productos de forma electrónica.

Este modelo de compras se realizó tras un análisis de prácticas efectuadas por países como Chile, Panamá, México, Brasil y Corea. Dicho estudio finalizó con la adopción del modelo de Corea del Sur, por ser lider mundial en esta temática (compras electrónicas); mediante su sistema de gestión denominado Korea On Line e-Procurement System (Koneps), definido como el 'marketplace' más grande del mundo. Este modelo, mencionan en información de SICOP [@sicop].

# Webscraping SICOP

## Carga de librerías y directorio de trabajo

El directorio de trabajo depende de donde se encuentre el archivo de trabajo.

```{r}
#| output: false
setwd("~/GitHub/R-Geografia-y-Data/posts/SICOP/") # Directorio de trabajo

# Paquetes a utilizar

library(RSelenium)
library(tidyverse)
library(rvest)
library(xml2)
library(stringi)
library(seleniumPipes)
library(XML)
library(knitr)
library(kableExtra)
```

## Inicio del server de selenium y el navegador

Es posible elaborar un código para conocer cuales son las ofertas que se encuentran en etapa de recepción de ofertas en el SICOP. Dada la estructura de la página se utiliza la libreria [RSelenium](https://cran.r-project.org/web/packages/RSelenium/index.html) en lugar de [rvest](https://rvest.tidyverse.org). Esto dado que se trata de un sitio web interactivo.

Se puede iniciar con la creación de un servidor para navegar.

```{r}
#| eval: false

# Este script permite obtener los concursos de 
# municipalidades que se encuentran en la etapa de recepción de ofertas

# Empezar el servidor
rs_driver_object <- rsDriver(browser = 'chrome', # Se utilizará Google Chrome
                             chromever = '108.0.5359.71', # Versión de Chrome
                             verbose = FALSE, # No incluir mensajes de estado
                             port = free_port(), # Se utiliza un puerto libre
                             check = TRUE) # Checar si hay nuevas versiones
```

Después de la creación del servidor, se puede crear un objeto cliente y se asigna a una variable. También se abre el navegador y la página web de SICOP.

```{r}
#| eval: false

# crear un objeto cliente
remDr <- rs_driver_object$client

# Se navega a la página de interés

remDr$navigate('https://www.sicop.go.cr/index.jsp') # 

```

Al estar en la página web interesa irse a la sección de la misma en donde se encuentra la información de los concursos actuales. La página web principal de SICOP se conforma por dos frames. El botón para ir a los concursos de encuentra en el primer frame, para poder clickearlo es necesario hacerle énfasis al primer frame.

```{r}
#| eval: false

# Se busca el identificador de los frames

webElems <- remDr$findElements("tag name","frame")

# Se aprecian los enlaces de frames existentes

sapply(webElems, function(x){x$getElementAttribute("src")})


```

Podemos apreciar que existen dos frames, los cuales corresponden al "top frame" y al "middle frame". Esto también puede analizarse desde el código fuente de la página web, lo cual es permitido por algunos navegadores

![Parte del código fuente donde se aprecia la estructura de la página](images/paste-A4394AA6.png){alt="Parte del código fuente donde se aprecia la estructura de la página" fig-align="center"}

Al comprobar cual de los dos frames corresponde al frame donde se encuentra la opción para buscar los concursos, se selecciona el mismo (recordar que se guardaron los frames en la variable "webElems", entonces nada más se selecciona el frame de arriba o "topFrame")

Ya seleccionado el frame que nos interesa, es posible hacer click en sus elementos. En este caso se realiza click en la pestaña de concursos. Para ello se utiliza el "xpath" el cual se puede obtener con la opción de "inspeccionar elemento" que ofrecen algunos navegadores.

```{r}
#| eval: false

# Se cambia al frame 1 (topFrame)

remDr$switchToFrame(webElems[[1]])

# Se busca el elemento de interés e inmediatamente se clickea el mismo

remDr$findElement("xpath", # Se especifica el método de búsqueda y se coloca el identificador
                  "/html/body/div[2]/div/div/div[4]/ul/li[2]/div[1]/a[3]")$clickElement() # Se clickea
```

Al estar en la página donde se colocan los parámetros de búsqueda, es posible continuar. No obstante, recordar que hicimos enfoque a un frame específico de la página. De acuerdo a la documentación únicamente debemos utilizar la misma función pero asignarle "NULL" en el argumento; a pesar de estar en la documentación dicho método no funciona y es necesario colocar "NA" en lugar de "NULL" para regresar al frame principal.

```{r}
#| eval: false

remDr$switchToFrame(NA) #

# Se busca el identificador de los frames

webElems <- remDr$findElements("tag name","frame")

# Se aprecian los enlaces de frames existentes

sapply(webElems, function(x){x$getElementAttribute("src")})


```

Apreciamos nuevamente que existen dos frames, pero al analizar la estructura de la página, vemos que el frame con los parámetros para buscar se encuentran en el segundo frame. Para ello se selecciona el mainframe y en el mainframe se selecciona el rightframe.

Además, se desea buscar todos los resultados que tengan "Municipalidad" en su texto. Para esto se busca y selecciona el cuadro donde se escribe y se coloca el texto.

```{r}
#| eval: false

webElems <- remDr$findElements("name","mainFrame")
remDr$switchToFrame(webElems[[1]])
webElems2 <- remDr$findElements("name","rightFrame")
remDr$switchToFrame(webElems2[[1]])

# Se busca el identificador para la descripción de procedimiento

DescProc <- remDr$findElement("name", "cartelNm") 

DescProc$sendKeysToElement(list("Municipalidad")) # Se escribe lo que interesa
```

Si se desea cambiar la fecha de búsqueda es posible realizarlo de la siguiente manera. Específicamente, se cambia la fecha de rangos de publicación, mientras que la fecha máxima usualmente corresponde al día en que se consulte.

## Llenado de formularios

```{r}
#| eval: false

# Cambiar fecha

dd <- "01" # Día
mm <- "01" # Mes
aa <- "2010" # Año

strdate <- paste0(dd,mm,aa) # deben ser de tipo string o si no se borran los ceros

# Se encuentra el cuadro de fecha con el xpath

fecha <- remDr$findElement("xpath", '//*[@id="regDtFrom"]')

fecha$clickElement() # Se clickea la fecha
fecha$clearElement() # Se borra la fecha que está puesta por default
fecha$sendKeysToElement(list(strdate)) # Se escribe lo que interesa
```

Enseguida, se busca la opción de "Estado del Concurso" mediante su xpath, el cual se obtiene desde el navegador. Se selecciona la opción "Todos"

```{r}
#| eval: false

remDr$findElement("xpath","/html/body/div[1]/div/div[2]/form[1]/table/tbody/tr[12]/td/select/option[1]")$clickElement() # Estado del concurso

```

## Obtención de información tabulada

Finalmente, para realizar la búsqueda se realiza click al cuadro de "consultar" especificando mediante su "xpath"

```{r}
#| eval: false

# Para consultar
# Se hace una variable para con la consulta para facilitar el ejemplo
Consultar <- remDr$findElement("xpath", "/html/body/div[1]/div/div[2]/p/span/a") 
Consultar$clickElement() # Se hace click en consultar (por xpath)
```

Al realizar la búsqueda se aprecia que los contenidos se encuentran en una tabla y además existe una cantidad de páginas con más tablas. Si se desea obtener todo el contenido de todas las páginas entonces el objetivo es la obtención de todas las tablas por cada páginas.

Sin embargo para comprender como funciona la obtención de información, se puede realizar por pasos. Para obtener la primera tabla se puede realizar lo siguiente:

```{r}
#| eval: false

read_html(remDr$getPageSource()[[1]]) %>% 
  html_nodes(xpath = "/html/body/div[1]/div/div[2]/table[2]") %>% 
  html_table(trim = T)

```

Y al ejecutar el código se obtiene un resultado similar al siguiente:

```{r}
#| echo: false
#| column: body-outset
ts <- read.csv("output/csv/tabla1.csv",encoding = "utf8")
#ts <- ts[,c(-1,-2,-4)]
for (i in 1:dim(ts)[2]) {
  ts[,i] <- str_trim(ts[,i])
}
ts <- ts[,c(-1,-2)]


kbl(ts) %>%
  kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

::: callout-note
Utilizar la barra de desplazamiento para lograr apreciar toda la tabla
:::

## Capturas de pantalla

Dicha tabla correspondería al contenido de tabla actual de la página web de SICOP. De igual forma puede realizarse un "screenshot" el contenido actual de la página de la siguiente manera:

```{r}
#| eval: false

# Si usas esta opción, la pestaña se maximiza y el screnshot abarcará más área
# remDr$maxWindowSize() 

remDr$screenshot(file = "output/ss/SICOP_Municipalidad.png") # Tomar screenshot
```

El screenshot se vería de la siguiente forma:

![](output/ss/SICOP_Municipalidad.png)

# Obtención de datos detallados

Según la tarea que se realice, puede que interese la obtención de más detalles en la misma página web. En la página de SICOP, al dar click en alguno de las descripciones de procedimientos es posible obtener información más detallada de cada concurso. Mediante el lenguaje R y RSelenium es posible; para esto hay que obtener el xpath de la descripción que se desea clickear.

```{r}
#| eval: false

# Se busca el xpath y se clickea
remDr$findElement("xpath", "/html/body/div[1]/div/div[2]/table[2]/tbody/tr[2]/td[2]/a[1]"
                  )$clickElement()
```

```{r}
#| eval: false

html <- read_html(remDr$getPageSource()[[1]])

read_html(remDr$getPageSource()[[1]]) %>% 
  html_nodes(xpath = "/html/body/div/div/div[2]/table[3]") %>% 
  html_table(trim = T)

```

Entonces, un método más adecuado sería la obtención de los nombres de columna y los contenidos de columna por separado. Esto es posible dado que cada nombre de columna posee un contenido de celda (es decir, no hay más de uno o de otro). Para esto se obtiene el xpath de la tabla de interés (ya que hay varias en la página web), se extrae el código fuente, se extraen los nombres de celda, los contenidos de celda y se asigna un identificador de columna para facilitar el pivot de la tabla.

Al pasar la tabla a formato largo, se asignan los nombres de columna que fueron obtenidos

```{r}
#| eval: false

html <- read_html(remDr$getPageSource()[[1]]) %>% 
  html_nodes(xpath = "/html/body/div/div/div[2]/table[3]")

nomb.column <- html %>% # Para obtener nombre de columna
  html_nodes("th.epcthl") %>% # Nodo con el contenido
  html_text() %>% # formato
  str_trim(side = "both") %>% # limpieza
  str_squish() %>% # remover espacios en blanco repetidos al interior del string
  make.names() # Se vuelve texto valido para nombre de columna

contenido <- html %>% # Para obtener contenido
  html_nodes("td.eptdl") %>% # Nodo con el contenido
  html_text() %>% 
  str_trim(side = "both") %>% # limpieza
  str_squish() # remover espacios en blanco repetidos al interior del string
```

Para regresar a la página donde se encuentra el resto de concursos únicamente se debe especificar lo siguiente:

```{r}
#| eval: false
remDr$goBack()
```

Ya obtenidos los nombres de columna y contenidos se procede a dar estructura a la tabla. Se puede realizar de la siguiente manera:

```{r}
#| eval: false

# Se realiza un dataframe en blanco con número de columnas igual
# al largo del "nomb.column" que será los nombres de columna
df0 <- data.frame(matrix(ncol = length(nomb.column))) 

df0[nrow(df0),] <- contenido # Se asigna la fila con el contenido
colnames(df0) <- nomb.column # Se asignan nombres de columna
```

El resultado de la tabla obtenida debería ser similar a la siguiente (para facilitar la visualización únicamente se muestran 3 elementos de la tabla):

```{r}
#| echo: false
#| column: body-outset
df <- read.csv("output/csv/tabla2_detalles.csv")
df <- df[,c(8,16,17)]
kbl(df) %>%
  kable_styling(bootstrap_options = "striped", full_width = F, position = "left") %>% 
  column_spec(1, bold = T, border_right = T) %>%
  column_spec(2, width = "30em")
```

Lo que se realizó fue el webscrape de los elementos de la siguiente "tabla":

![](images/image-1589146602.png)

## Utilización de loops para obtener grandes volúmenes de información

Al tener la estructura básica para obtener la información de una página web, es posible aplicar la misma fórmula para obtener grandes cantidades de información de la misma página web. Para esto es posible utilizar el loop `for`.

```{r}
#| eval: false

# Ejemplo de utilización de un loop "for"

for (x in 1:10) { # Se brinda una secuencia la cual será seguida por la variable
  print(x) # Se indica que devuelva el valor de la variable
  # Al finalizar devolverá el siguiente valor que corresponde a la variable del loop
}
```

En el caso estudiado si se obtiene una secuencia que implique toda la información que se desea obtener, es posible aplicar dicho loop para obtener la misma. Para esto es necesario analizar un poco la estructura de la página.

Se puede realizar de diferentes formas pero en este caso se buscará el patrón para cada nodo donde se clickea para obtener información específica del concurso. Al analizar la secuencia de concursos se aprecia lo siguiente:

```{r}
#| eval: false

# xpath para el primer concurso de la página
"/html/body/div[1]/div/div[2]/table[2]/tbody/tr[2]/td[2]/a[1]"

# xpath para el último concurso de la página
"/html/body/div[1]/div/div[2]/table[2]/tbody/tr[11]/td[2]/a[1]"
```

El "tr\[x\]" aumenta en número según el concurso que corresponda. Asumiendo una página llena de concursos, tendríamos 10 concursos por página. No obstante si se desean obtener todos los concursos de todas las páginas, llegará el momento en que una de estas páginas no tendrá 10 concursos en la página; para evitar problemas con esto es posible buscar una condición que indique el número de concursos que hay por página.

Un método para obtener la cantidad de concursos sería obtener la tabla de concursos y saber cuantos elementos hay en la misma. Para evitar el cambio entre frames, es posible utilizar el link directo al frame donde se encontrarían las tablas (este es un frame dentro del "mainFrame"). Este link puede obtenerse mediante el método utilizado en la explicación del cambio entre frames.

```{r}
#| eval: false

remDr$switchToFrame(NA) # Si hay un frame enfocado, se quita el focus.

# Se cambia al mainFrame
remDr$switchToFrame(webElems[[1]]) # Se cambia al mainFrame

# Se busca el identificador de los frames
webElems <- remDr$findElements("tag name","frame")

# Se aprecian los enlaces de frames existentes, interesa el frame "moduloOferta"
# Así que se guarda su valor en un string
sapply(webElems, function(x){x$getElementAttribute("src")})

link_tabla <- as.character(sapply(webElems, function(x){x$getElementAttribute("src")})[2])
```

Obtenido el frame mencionado, ya no es necesario cambiar constantemente entre frames y con esto es posible ahorrar el espacio del código que pudo ser usado para ello. Ahora es posible realizar la misma búsqueda como la realizada en la primera sección.

```{r}
#| eval: false

# Se realiza lo mismo que se realizó al inicio
# Pero en este caso no es necesario cambiar entre frames

remDr$switchToFrame(NA) # Si hay un frame enfocado, se quita el focus.

# Página de SICOP para buscar concursos

remDr$navigate('https://www.sicop.go.cr/moduloOferta/search/EP_SEJ_COQ600.jsp')

# Se busca el identificador para la descripción de procedimiento

DescProc <- remDr$findElement("name", "cartelNm") 

DescProc$sendKeysToElement(list("Municipalidad")) # Se escribe lo que interesa

# Cambiar fecha

dd <- "01" # Día
mm <- "01" # Mes
aa <- "2010" # Año

strdate <- paste0(dd,mm,aa) # deben ser de tipo string o si no se borran los ceros

# Se encuentra el cuadro de fecha con el xpath

fecha <- remDr$findElement("xpath", '//*[@id="regDtFrom"]')

fecha$clickElement() # Se clickea la fecha
fecha$clearElement() # Se borra la fecha que está puesta por default
fecha$sendKeysToElement(list(strdate)) # Se escribe lo que interesa

remDr$findElement("xpath","/html/body/div[1]/div/div[2]/form[1]/table/tbody/tr[12]/td/select/option[1]")$clickElement() # Estado del concurso

# Para consultar
# Se hace una variable para con la consulta para facilitar el ejemplo
Consultar <- remDr$findElement("xpath", "/html/body/div[1]/div/div[2]/p/span/a") 
Consultar$clickElement() # Se hace click en consultar (por xpath)

```

Para obtener el número de concursos para cada página es posible realizar lo siguiente:

```{r}
#| eval: false

num_pag <- read_html(remDr$getPageSource()[[1]]) %>% # se extrae numero de paginas
  html_nodes("li a") %>% # Se especifica lo que contiene el número de páginas
  html_text() # se devuelve como texto

# Se remueven los elementos en blanco

num_pag <- num_pag[num_pag != ""]
```

Luego se plantea el loop para obtener todas las tablas por cada página del set de páginas (de la página 1 a la página 10 únicamente).

```{r}
#| eval: false

rm("df0","df1","i","df2")

# Inicio del loop

for (i in num_pag) {

# Si existe el df "df0" no se hace nada (se enseña un mensaje)
# Si no existe se crea un df en blanco con x cantidad de columnas
  
ifelse(exists("df0"),paste0("Procesando página ",i,"..."),
       assign("df0",data.frame(matrix(ncol = length(1:5),nrow = 0))))
  
  # Se lee el código fuente, se busca el nodo con xpath, se extrae la tabla
  # Y se pasa a un objeto data frame
  
  df1 <- read_html(remDr$getPageSource()[[1]]) %>% 
    html_nodes(xpath = "/html/body/div[1]/div/div[2]/table[2]") %>%
    html_table() %>%
    as.data.frame()

  # Se asignan nombres de columna del df1 al df0
  colnames(df0) <- colnames(df1)

  # Se combina el df en blanco y el df con datos
  df0 <- rbind(df0,df1) #

  # Se crea una nueva variable dado que el número de página no corresponde al número
  # para pasar de página según el xpath
  jj <- as.numeric(i)-1

  # Si el número de página es mayor a 2, entonces antes de pasar de página se volverá a
  # la página 1 antes de ir a la siguiente página (esto dado que el xpath cambia
  # según la página en que se encuentre)
  if (i > 2) {
    remDr$goBack # Ir hacia la página anterior
    remDr$findElement("xpath", # Ir a la siguiente página
                      paste0('//*[@id="paging"]/ul/li/a[',jj,']'))$clickElement() 
  } else{
    remDr$findElement("xpath", # Ir a la siguiente página
                      paste0('//*[@id="paging"]/ul/li/a[',jj,']'))$clickElement()
  }
  
}
```

Después de llegar al final del número de páginas que fueron obtenidas y almacenadas en la variable "num_pag", es posible seguir con el siguiente set de páginas. Para esto es posible indicar que cuanto se termine el loop de un set de páginas, se pase al siguiente set de páginas y se obtenga nuevamente el número de páginas para el nuevo set. Al revisar los xpath para pasar al siguiente set de páginas se obtiene lo siguiente:\

```{r}
#| eval: false

'//*[@id="paging"]/ul/li/a[10]' # xpath para pasar al segundo set de páginas

'//*[@id="paging"]/ul/li/a[12]' # xpath para pasar el resto de set de páginas
```

Existe diferencia entre el xpath para pasar al segundo set de páginas y el que permite pasar el resto de set de páginas. Alternativamente, para evitar el uso de código adicional puede utilizarse un identificador de nombre en lugar de un xpath. El identificador de nombre para pasar de set de páginas en este caso es "page02" (se obtiene "inspeccionando" en el navegador). Entonces, pasar pasar cualquier set de páginas es posible realizar lo siguiente:

```{r}
#| eval: false
remDr$findElement("class name", "page02")$clickElement() # Click siguiente set de paginas
```

Además de pasar de páginas, para realizar el loop es necesario cuando debe detenerse el mismo. Para esto es posible determinar la cantidad de set de páginas de antemano. Entonces es posible obtener el xpath que indica la cantidad máxima de páginas de los concursos. A no ser que exista un cambio mientras se obtiene la información, no sería necesario que este paso se encuentre adentro del loop.

```{r}
#| eval: false

# se extrae numero de paginas

tot_pags <- read_html(remDr$getPageSource()[[1]]) %>% 
  # Se especifica lo que contiene el número de páginas
  html_nodes(xpath = '//*[@id="total"]/span[3]') %>% 
  html_text() %>% 
  # Se pasa a numérico
  as.numeric()

tot_pags
```

Ahora se crea una variable que cambiará según la cantidad total de páginas. Esta ayudará a determinar cuando se detendrá el loop. Se divide entre 10 el número total de páginas y se divide hacia abajo el resultado; esto hará que al llegar a la última página, termine el loop

```{r}
#| eval: false

# Se coloca nuevamente la asignación de esta variable para facilitar la comprensión de
# donde proviene el "set_pags"

set_pags <- ceiling(tot_pags/10) # Floor para redondear hacia arriba
set_pags                         # Se visualiza el resultado
```

Entonces, ya se posee suficiente código para ensamblar el loop, excepto que se realizará el mismo obteniendo mayores detalles de cada concurso (lo cual se realizó anteriormente). El fin es rla obtención de los detalles de cada concurso pero a lo largo de todas las páginas y sets de páginas existentes para el momento de ejecución del código. Para ello existiría una jerarquía de loops, de mayor a menos: una que itere sobre los sets de páginas, otra que itere sobre los números de página de los sets de páginas y otra que itere sobre cada elemento de tabla de la página.

```{r}
#| eval: false


# Se coloca el xpath en dos variables para que al concatenarlas
# sea posible colocar en medio la variable de iteración

xp1 <- "/html/body/div[1]/div/div[2]/table[2]/tbody/tr["
xp2 <- "]/td[2]/a[1]"
```

Entonces se procede a plantear el loop:

```{r}
#| eval: false
#| warning: false

# Loop para los sets de páginas

for (i in 1:set_pags) { 
  num_pag <- read_html(remDr$getPageSource()[[1]]) %>%
    html_nodes("li a") %>% 
    html_text()
  num_pag <- num_pag[num_pag != ""]
  num_pag <- length(num_pag)+1

  # Loop para las páginas de un set

  for (ii in 1:(max(num_pag))) { 
  
    # Si el número de iteración es mayor a 1 entonces
    # se pasará la página
  
    if (ii > 1){
      remDr$findElement("xpath",
      paste0('//*[@id="paging"]/ul/li/a[',ij,']'))$clickElement()
    }
  
    # Se determina el número de concursos que tiene la tabla
    # para la determinada página
  
    nrow_tab <- read_html(remDr$getPageSource()[[1]]) %>% 
      html_nodes(xpath = "/html/body/div[1]/div/div[2]/table[2]") %>%
      html_table() %>%
      as.data.frame() %>% 
      nrow() 
  
    # Loop para los rows
  
    for (j in 1:nrow_tab) { 
      print(paste0("Scrapeando contenido del concurso ",j))
      jj <- as.numeric(j) + 1
      
      # Se clickea en el elemento j de la tabla
      
      remDr$findElement("xpath", paste0(xp1,jj,xp2))$clickElement()
      
      # Se obtiene el código y se guarda en una variable
      
      html <- read_html(remDr$getPageSource()[[1]]) %>% 
        html_nodes(xpath = "/html/body/div/div/div[2]/table[3]")
      
      # Se obtienen los nombres de columna
      
      nomb.column <- html %>%
        html_nodes("th.epcthl") %>%
        html_text() %>% 
        str_trim(side = "both") %>%
        str_squish() %>% 
        make.names()
       
      # Se obtiene el contenido
        
      contenido <- html %>% 
        html_nodes("td.eptdl") %>%
        html_text() %>% 
        str_trim(side = "both") %>% 
        str_squish()
      
      # Se realiza un df en blanco del largo de nomb.column
      
      assign("df0",data.frame(matrix(ncol = length(nomb.column))))
      
      # Se asignan los nombres de columna
      # Se asigna el contenido al df

      colnames(df0) <- nomb.column
      df0[nrow(df0),] <- contenido

      # Si existe "df_concursos" se le agrega df0
      # si no existe, df0 será df_concursos
      
      ifelse(exists("df_concursos"),
             assign("df_concursos",bind_rows(df0, df_concursos)),
             assign("df_concursos", df0))
      
      # Se remueven las variables innecesarias
      
      rm(df0,nomb.column,contenido,html)
      
      # Se vuelve a la página anterior
      
      remDr$goBack()
    }
  
    # Si el set de páginas es mayor a 1 el numero para hacer click en xpath
    # cambia y aumenta de 1 (en el primer set es 1 para la pagina 2) a 3 y
    # por esta razón después de que el set de páginas es mayor a 1, se suma 2

    if (i > 1) { 
      ij <- ii+2
      } else{
      ij <- ii
      }
  }

# Si i (set de páginas) es igual a "set_pags" entonces
# el webscrape terminó. De lo contrario dará click
# en el siguiente set de páginas

if (i == set_pags) {
  print("Webscrape terminado")
  } else{

    # Para pasar el set de    
    remDr$findElement("class name", "page02")$clickElement() 
  }
}
```

El resultado es un data frame con los detalles de los concursos publicados en SICOP que están relacionados con la palabra "Municipalidad" y que aun se encuentran o no en recepción de ofertas. La tabla debería lucir similar a la siguiente:

```{r}
#| echo: false
#| column: screen-inset
df <- read.csv("output/csv/ConcursosSICOP.csv")
df <- df[,-1]
df <- head(df)
rmarkdown::paged_table(df)

```
